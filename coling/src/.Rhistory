standardize <- function(x) {
return((x-mean(x))/sd(x))
}
z <- c(3.0,5.5,6.0)
standardize(z)
install.packages('dplyr')
install.packages('ggplot2')
View(standardize)
library(dplyr)
library(lubridate)
break_date(data){
return(data %>% mutate(year=year(datetime), month=month(datetime), day=day(datetime)))
}
library(dplyr)
library(lubridate)
break_date <- function(data){
return(data %>% mutate(year=year(datetime), month=month(datetime), day=day(datetime)))
}
bikes <- read.table('bikes-train.csv')
library(dplyr)
library(lubridate)
break_date <- function(data){
return(data %>% mutate(year=year(datetime), month=month(datetime), day=day(datetime)))
}
bikes[1:3,]
bikes[1:3,c("datetime","season")]
select(bikes[1:3], datetime, temp, count)
select(bikes[1:3], datetime, atemp, count)
select(bikes[1:3], datetime, count)
select(bikes[1:3], c(datetime, count))
bikes[1:3]
bikes[1:3,]
# First three rows of bikes
data <- bikes[1:3,]
print(data)
bikes <- read.table('bikes-train.csv', header=TRUE)
library(dplyr)
library(lubridate)
break_date <- function(data){
return(data %>% mutate(year=year(datetime), month=month(datetime), day=day(datetime)))
}
bikes <- read.table('bikes-train.csv', header=TRUE, sep=",")
library(dplyr)
library(lubridate)
break_date <- function(data){
return(data %>% mutate(year=year(datetime), month=month(datetime), day=day(datetime)))
}
# First three rows of bikes
head(bikes)
# Show the beginning of bikes
head(bikes)
head(break_date(bikes))
# Show the beginning of bikes
tail(bikes)
head(break_date(bikes))
# Show the beginning of bikes
tail(bikes)
tail(break_date(bikes))
break_date <- function(dataframe) {
return(         )
}
?desc
descending_date <- function( data) {
return(data %>% desc %>% arrange(datetime)
}
descending_date <- function( data) {
return(data %>% desc %>% arrange(datetime))
}
tail(descending_date(bikes))
tail(bikes)
?group_by
str(bikes)
# Create a dataset based on bikes:
data <- (bikes %>% select(count, temp, windspeed, season) %>% mutate(response=count))
relative_lm_mae(data)
relative_lm_mae <- function(data) {
y_pred = data$response
mae <- function(m) {
return(mean(abs(y-predict(m, data))))
}
m0 <- lm(response ~ 1, data=data)
mz <- lm(reponse ~ ., data=date)
return(mae(mz)/mae(m0))
}
# Create a dataset based on bikes:
data <- (bikes %>% select(count, temp, windspeed, season) %>% mutate(response=count))
relative_lm_mae(data)
# Create a dataset based on bikes:
(bikes %>% select(count, temp, windspeed, season) %>% mutate(response=count))
source('~/.active-rstudio-document', echo=TRUE)
# Create a dataset based on bikes:
data <- (bikes %>% select(count, temp, windspeed, season) %>% mutate(response=count))
# Create a dataset based on bikes:
data <- (bikes %>% select(count, temp, windspeed, season) %>% rename(response=count))
relative_lm_mae <- function(data) {
mae <- function(m) {
return(mean(abs(data$reponse-predict(m, data))))
}
m0 <- lm(response ~ 1, data=data)
mz <- lm(reponse ~ ., data=date)
return(mae(mz)/mae(m0))
}
relative_lm_mae(data)
relative_mae <- function(y, y_base, y_pred) {
mae <- function(y, y_pred) {
return(mean(abs(y-y_pred)))
}
return (mae(y, y_pred)/mae(y,y_base))
relative_mae <- function(y, y_base, y_pred) {
mae <- function(y, y_pred) {
return(mean(abs(y-y_pred)))
}
return (mae(y, y_pred)/mae(y,y_base))
}
relative_mae <- function(y, y_base, y_pred) {
mae <- function(y, y_pred) {
return(mean(abs(y-y_pred)))
}
return (mae(y, y_pred)/mae(y,y_base))
}
}
relative_mae <- function(y, y_base, y_pred) {
mae <- function(y, y_pred) {
return(mean(abs(y-y_pred)))
}
return (mae(y, y_pred)/mae(y,y_base))
}
as.numeric(c(1,2,3))
as.numeric(as.factor(c("a","b","c"))
)
as.numeric(as.factor(c("a","b","c")))
as.numeric(as.factor(c("a","b","c")))
as.character(as.factor(c("a","b","c")))
as.character(as.factor(c("a","b",NA)))
X <- as.factor(c("a","b",NA))
X
as.character(X)
?rm.na
?na.omit
na.omit(X)
as.character(na.omit(X))
?na.omit(X)
na.omit(X)
na.omit(c(1,2))
na.omit(c(1,2,NA))
X
View(data)
View(data)
data <- read.table("/home/gchrupala/Downloads/pilot_3.csv", sep=";")
data <- read.table("/home/gchrupala/Downloads/pilot_3.csv", sep=";")
View(data)
data <- read.table("/home/gchrupala/Downloads/pilot_3.csv", sep=";", header=TRUE)
data[data$your_answer=="na",]$your_answer==NA
View(data)
data
data$your_answer
data[data$your_answer=="na",]$your_answer=NA
library(dplyr)
data <- data %>% na.omit
str(data)
data$age %>% levels
data[data$age=="thirty-three,"]$age = 33
library(dplyr)
data <- read.table("/home/gchrupala/Downloads/pilot_3.csv", sep=";", header=TRUE)
data[data$your_answer=="na",]$your_answer=NA
data <- data %>% na.omit
data[data$age=="thirty-three",]$age = 33
data <- read.table("/home/gchrupala/Downloads/pilot_3.csv", sep=";", header=TRUE)
data[data$your_answer=="na",]$your_answer=NA
data <- data %>% na.omit
data[data$age=="thirty-three",]$age = "33"
data <- read.table("/home/gchrupala/Downloads/pilot_3.csv", sep=";", header=TRUE)
data[data$your_answer=="na",]$your_answer=NA
data <- data %>% na.omit
data$age <- as.character(data$age)
data[data$age=="thirty-three",]$age = "33"
source('~/.active-rstudio-document', echo=TRUE)
data$age <- as.numeric(data$age)
str(data)
data$your_answer <- as.numeric(data$your_answer)
str(data)
m <- lm(your_answer ~ age + gender + category, data=data)
summary(m)
library(ggplot2)
ggplot(data, aes(x=gender, y=your_answer)) + geom_boxplot()
ggplot(data, aes(x=age, y=your_answer)) + geom_boxplot()
ggplot(data, aes(x=age, y=your_answer)) + geom_point()
ggplot(data, aes(x=age, y=your_answer)) + geom_point() + geom_smooth()
ggplot(data, aes(x=country, y=your_answer)) + geom_boxplot()
ggplot(data, aes(x=category, y=your_answer)) + geom_boxplot()
ggplot(data, aes(x=category, y=your_answer)) + geom_boxplot() + coord_flip()
ggplot(data, aes(x=gender, y=your_answer)) + geom_boxplot()
odata <- read.table(text="
order step1 step2 step3
5     0     1     0
7     0     1     1
10    1     0     0
20    0     1     1
25    1     1     1
30    1     1     0
40    1     0     1
45    1     0     0
73    1     0     0
", header=TRUE)
m <- lm(order ~ step1 + step2 + step3, data=odata)
m
library(tidyr)
library(ggplot2)
variants <- data.frame(area1=c(0,0,0,0,1,1,1,1),
area2=c(0,0,1,1,0,0,1,1),
area3=c(0,1,0,1,0,1,0,1))
variants$prob <- predict(k, variants, type='response')
k <- glm(bounce ~ . , data=bdata, family=binomial("logit"))
variants <- data.frame(area1=c(0,0,0,0,1,1,1,1),
area2=c(0,0,1,1,0,0,1,1),
area3=c(0,1,0,1,0,1,0,1))
variants$prob <- predict(k, variants, type='response')
variants <- unite(variants, version, c(area1, area2, area3), remove=FALSE)
ggplot(data=variants, aes(x=version, y=prob)) +
geom_bar(stat="identity")
bdata_v <- unite(bdata, version, c(area1, area2, area3), remove=FALSE)
data <- read.csv("queries.csv", skip=6, header=TRUE)
library(ggplot2)
library(dplyr)
subset <- data %>% filter(Impressions > 200 &
Country != "Netherlands" &
Query != "(not set)") %>%
mutate(Country=reorder(Country, Impressions))
by_country <- data %>% group_by(Country) %>%
summarize(Impressions=sum(Impressions)) %>%
filter(Impressions > 500) %>%
mutate(Country=reorder(Country, Impressions))
ggplot(subset, aes(Country, Impressions)) +
geom_bar(aes(fill=Query),  stat="identity") +
coord_flip()
ggplot(subset, aes(Query, Impressions)) +
setwd("~/repos/web-analytics")
data <- read.csv("queries.csv", skip=6, header=TRUE)
library(ggplot2)
library(dplyr)
subset <- data %>% filter(Impressions > 200 &
Country != "Netherlands" &
Query != "(not set)") %>%
mutate(Country=reorder(Country, Impressions))
by_country <- data %>% group_by(Country) %>%
data <- read.csv("queries.csv", skip=6, header=TRUE)
library(ggplot2)
library(dplyr)
subset <- data %>% filter(Impressions > 200 &
Country != "Netherlands" &
Query != "(not set)") %>%
mutate(Country=reorder(Country, Impressions))
by_country <- data %>% group_by(Country) %>%
summarize(Impressions=sum(Impressions)) %>%
filter(Impressions > 500) %>%
mutate(Country=reorder(Country, Impressions))
ggplot(subset, aes(Country, Impressions)) +
geom_bar(aes(fill=Query),  stat="identity") +
coord_flip()
ggplot(subset, aes(Query, Impressions)) +
geom_bar(aes(fill=Country), stat="identity") +
coord_flip()
ggplot(by_country, aes(x=Country, y=Impressions)) +
geom_bar(stat="identity") +
coord_flip()
library(boot)
A <- rbinom(200, 1, p=0.75)
B <- rbinom(200, 1, p=0.70)
data <- data.frame(cond=c(rep('A', length(A)),
rep('B', length(B))),
bounce=c(A,B))
stat <- function(data, ix) {
(data[ix,] %>% filter(cond=='A'))$bounce %>% mean -
(data[ix,] %>% filter(cond=='B'))$bounce %>% mean
}
data_boot <- data.frame()
odata <- read.table(text="
order step1 step2 step3
5     0     1     0
7     0     1     1
10    1     0     0
20    0     1     1
25    1     1     1
30    1     1     0
40    1     0     1
45    1     0     0
73    1     0     0
", header=TRUE)
m <- lm(order ~ step1 + step2 + step3, data=odata)
m
bdata <- read.table(text="
bounce area1 area2 area3
1      0     0     1
1      0     1     0
1      1     1     0
1      1     0     0
1      0     1     0
1      1     1     1
0      0     0     1
0      0     1     1
0      1     0     0
0      1     0     1
", header=TRUE)
k <- glm(bounce ~ . , data=bdata, family=binomial("logit"))
#install.packages('tidyr')
library(tidyr)
install.packages('tidyr')
library(tidyr)
library(ggplot2)
variants <- data.frame(area1=c(0,0,0,0,1,1,1,1),
area2=c(0,0,1,1,0,0,1,1),
area3=c(0,1,0,1,0,1,0,1))
variants$prob <- predict(k, variants, type='response')
variants <- unite(variants, version, c(area1, area2, area3), remove=FALSE)
ggplot(data=variants, aes(x=version, y=prob)) +
geom_bar(stat="identity")
bdata_v <- unite(bdata, version, c(area1, area2, area3), remove=FALSE)
ggplot(data=bdata_v %>% group_by(version) %>% summarize(mean=mean(bounce)),
aes(x=version, y=mean)) +
geom_bar(stat="identity")
bdata_v
variants <- data.frame(step1=c(0,0,0,0,1,1,1,1),
step2=c(0,0,1,1,0,0,1,1),
step3=c(0,1,0,1,0,1,0,1))
variants$order <- predict(k, variants, type='response')
variants <- unite(variants, version, c(step1, step2, step3), remove=FALSE)
variants <- data.frame(step1=c(0,0,0,0,1,1,1,1),
step2=c(0,0,1,1,0,0,1,1),
step3=c(0,1,0,1,0,1,0,1))
variants$order <- predict(m, variants, type='response')
variants <- unite(variants, version, c(step1, step2, step3), remove=FALSE)
ggplot(data=variants, aes(x=version, y=order)) +
geom_bar(stat="identity")
m
sum(coefficients(m))
predict(m, data.frame(step1=1,step2=1,step3=1))
odata_v <- unite(odata, version, c(step1, step2, step3), remove=FALSE)
ggplot(data=odata_v %>% group_by(version) %>% summarize(mean=mean(order)),
aes(x=version, y=mean)) +
geom_bar(stat="identity")
ggplot(data=variants, aes(x=version, y=order)) +
geom_bar(stat="identity")
odata_v <- unite(odata, version, c(step1, step2, step3), remove=FALSE)
ggplot(data=odata_v %>% group_by(version) %>% summarize(mean=mean(order)),
aes(x=version, y=mean)) +
geom_bar(stat="identity")
predict(m, data.frame(step1=0,step2=1,step3=0))
predict(m, data.frame(step1=0,step2=1,step3=0))
M <- lm(order ~ step1 + step2)
M <- lm(order ~ step1 + step2, data=data)
M <- lm(order ~ step1 + step2, data=odata)
M
predict(M, odata)
predict(M, data.frame(step1=1, step1=1)
)
predict(M, data.frame(step1=1, step1=1))
predict(M, data.frame(step1=1, step2=1))
predict(M, data.frame(step1=0, step2=0))
predict(M, data.frame(step1=0, step2=1))
M
")
)
)
""
)
')'
''
'
"
M <- lm(response ~ x + y, data=data_xor)
data_xor <- read.table(text="
response x y
0        0 0
10       0 1
10       1 0
0        1 1
", header=TRUE)
M <- lm(response ~ x + y, data=data_xor)
M
data_xor <- read.table(text="
response x y
5      0 0
10       0 1
10       1 0
5        1 1
", header=TRUE)
M <- lm(response ~ x + y, data=data_xor)
M
data_xor <- read.table(text="
response x y
5        0 0
10       0 1
10       1 0
5        1 1
", header=TRUE)
M <- lm(response ~ x + y, data=data_xor)
M
predict(M, data.frame(x=1,y=1))
M <- lm(response ~ x*y, data=data_xor)
predict(M, data.frame(x=1,y=1))
predict(M, data.frame(x=0,y=1))
predict(M, data.frame(x=1,y=0))
predict(M, data.frame(x=1,y=1))
M
iris
library(ggplot2)
ggplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point()
gplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point()
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
ggplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point()
gplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point()
library(ggplot2)
ggplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point()
ggplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point() + geom_smooth()
library(stat)
install.packages('stat')
install.packages('stats')
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
loess
m <- loess(Sepal.Length ~ Petal.Width, data=iris)
predict(m, iris)
predict(m, iris, se = True)
predict(m, iris, se = TRUE)
plot(predict(m, iris, se = TRUE)$fit)
plot(predict(m, iris, se = TRUE)$se.fit)
ggplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point() + geom_smooth()
library(ggplot2)
ggplot(data=iris, aes(x=Petal.Width, y=Sepal.Length)) + geom_point() + geom_smooth()
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Length)) + geom_point() + geom_smooth()
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth()
m <- loess(Sepal.Width ~ Petal.Lendth, data=iris)
m <- loess(Sepal.Width ~ Petal.Length, data=iris)
plot(predict(m, iris, se = TRUE)$se.fit)
plot(predict(m, iris, se = TRUE)$fit)
?loess
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth()
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth(method = "lm")
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth(method = "loess")
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth(method = "gml")
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth(method = "glm")
?geom_smooth
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth(method = "gam")
ggplot(data=iris, aes(x=Petal.Length, y=Sepal.Width)) + geom_point() + geom_smooth(method = "loess")
library(dplyr)
library(ggplot2)
data <- read.table(text="
model predictors rsq
sum word 	0.706
sum deprel 	0.709
sum position 	0.709
sum full 	0.712
viz word 	0.488
viz deprel 	0.508
viz position 	0.499
viz full 	0.514", header=TRUE)
data[data$model=="sum","score"] = data[data$model=="sum","rsq"]/0.706
data[data$model=="viz","score"] = data[data$model=="viz","rsq"]/0.488
data <- data %>% mutate(predictors = reorder(predictors, rsq))
ggplot(data, aes(x=model, color=predictors, y=score)) + geom_boxplot() +  theme(aspect.ratio=2/3, text=element_text(size=25)) +
ylab("R Squared relative to word")
a2 <- read.table("~/Downloads/a2_newvariables.csv")
a2 <- read.table("~/Downloads/a2_newvariables.csv")
a2 <- read.table("~/Downloads/a2_newvariables.csv", sep=";")
a2 <- read.table("~/Downloads/a2_newvariables.csv", sep=";", header=TRUE)
survival <- read.table("~/Downloads/survivaldataset2.csv", sep=";", header=TRUE)
survival <- read.table("~/Downloads/survivaldataset2.csv", header=TRUE)
survival <- read.table("~/Downloads/survivaldataset2.csv", sep=",", header=TRUE)
df <- merge(survival,a2, by = c('location', 'direction'))
head(a2)
head(survival)
head(survival$direction)
df <- merge(survival,a2, by = c('location'))
df <- merge(survival,a2, by='location')
library(dplyr)
a2 <- read.table("~/Downloads/a2_newvariables.csv", sep=";", header=TRUE)
survival <- read.table("~/Downloads/survivaldataset2.csv", sep=",", header=TRUE)
df <- merge(survival,a2, by='location')
head(a2$location)
head(survival$location)
survival$avg_sun <- sapply(interval(survival$newlightbulb, survival$Date_broken), function(i)
mean(a2$Sunshine[a2$Date %within% i]))
??interval
library(difftime)
a2 <- read.table("~/Downloads/a2_newvariables.csv", sep=";", header=TRUE)
survival <- read.table("~/Downloads/survivaldataset2.csv", sep=",", header=TRUE)
survival$avg_sun <- sapply(interval(survival$newlightbulb, survival$Date_broken), function(i)
mean(a2$Sunshine[a2$Date %within% i]))
library(lubridate)
install.packages("lubridate")
library(lubridate)
a2 <- read.table("~/Downloads/a2_newvariables.csv", sep=";", header=TRUE)
survival <- read.table("~/Downloads/survivaldataset2.csv", sep=",", header=TRUE)
survival$avg_sun <- sapply(interval(survival$newlightbulb, survival$Date_broken), function(i)
mean(a2$Sunshine[a2$Date %within% i]))
k <- 0.1
rate <- function(m) { k*(1-m)/(m + k*(1-m))}
library(ggplot2)
plot(rate)
source('~/repos/conll-2016/src/plots.R', echo=TRUE)
recall %>% parse_exp() %>% group_by(exp)
recall %>% parse_exp() %>% group_by(exp) %>% summarize(max_score=max(score))
recall %>% parse_exp() %>% group_by(epoch) %>% summarize(max_score=max(score))
recall %>% parse_exp() %>% group_by(Model) %>% summarize(max_score=max(score))
recall %>% parse_exp() %>% group_by(Model) %>% summarize(max_score=max(score)) %>% ggplot(x=Model, y=max_score) %>% geom_point()
recall %>% parse_exp() %>% group_by(Model) %>% summarize(max_score=max(score)) %>% ggplot(x=Model, y=max_score) + geom_boxplot()
recall %>% parse_exp() %>% group_by(Model) %>% summarize(max_score=max(score)) %>% ggplot(x=Model, y=max_score) + geom_point()
recall %>% parse_exp() %>% group_by(Model) %>% summarize(max_score=max(score)) %>% ggplot(aes(x=Model, y=max_score)) + geom_point()
